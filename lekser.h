#ifndef FLEX_HEADER_lekser_h
#define FLEX_HEADER_lekser_h
#define YY_Lekser_CHAR char
#line 1 "C:\\Documents and Settings\\\37777777643ukaszek\\Moje dokumenty\\XBuilder Projekty\\Interpreter\\bison++ flex++\\flexskel.h"
/* A lexical scanner header generated by flex */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */


/*********************************************/
/* SYSTEM dependent declaration, includes... */
/*********************************************/
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
#ifdef __cplusplus
#ifndef YY_USE_PROTOS
#define YY_USE_PROTOS
#endif
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#else	/* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#else
#endif	/* __GNUC__ */
#ifndef YY_USE_PROTOS
#define YY_USE_PROTOS
#endif
#endif	/* __STDC__ */
#endif	/* ! __cplusplus */
/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif
#include <stdio.h>




/* % here is the declaration from section1 %header{  */
#line 4 "interpreter.l"
#define YY_Lekser_IOSTREAM
#line 6 "interpreter.l"
#define YY_Lekser_LEX_PARAM  YY_Parser_STYPE *val
#line 9 "interpreter.l"
#include <stdlib.h>
#include <string>

#include "parser.h"
#include "tablicaSlowKluczowych.h"

#line 17 "interpreter.l"
#define YY_Lekser_MEMBERS  public: SymbolLocation sLocation;
#line 31 "interpreter.l"
#line 52 "C:\\Documents and Settings\\\37777777643ukaszek\\Moje dokumenty\\XBuilder Projekty\\Interpreter\\bison++ flex++\\flexskel.h"

#ifdef YY_USE_CLASS
#ifdef YY_Lekser_IOSTREAM
#include <iostream.h>
#define YY_Lekser_IFILE  istream
#define YY_Lekser_OFILE ostream
#define YY_Lekser_ERRFILE cerr

#ifndef YY_Lekser_IFILE_DEFAULT
#define YY_Lekser_IFILE_DEFAULT &cin
#endif

#ifndef YY_Lekser_OFILE_DEFAULT
#define YY_Lekser_OFILE_DEFAULT &cout
#endif

#endif
#endif

#ifndef YY_Lekser_IFILE
#define YY_Lekser_IFILE FILE
#endif

#ifndef YY_Lekser_OFILE
#define YY_Lekser_OFILE FILE
#endif

#ifndef YY_Lekser_ERRFILE
#define YY_Lekser_ERRFILE stderr
#endif

#ifndef YY_Lekser_IFILE_DEFAULT
#define YY_Lekser_IFILE_DEFAULT stdin
#endif

#ifndef YY_Lekser_OFILE_DEFAULT
#define YY_Lekser_OFILE_DEFAULT stdout
#endif




#ifndef YY_Lekser_TEXT
#define YY_Lekser_TEXT yytext
#endif
#ifndef YY_Lekser_LENG
#define YY_Lekser_LENG yyleng
#endif
#ifndef YY_Lekser_IN
#define YY_Lekser_IN yyin
#endif
#ifndef YY_Lekser_OUT
#define YY_Lekser_OUT yyout
#endif

#ifndef YY_Lekser_LEX_RETURN
#define YY_Lekser_LEX_RETURN int
#else
#ifndef YY_Lekser_LEX_DEFINED
#define YY_Lekser_LEX_DEFINED
#endif
#endif

#ifndef YY_Lekser_LEX
#define YY_Lekser_LEX yylex
#else
#ifndef YY_Lekser_LEX_DEFINED
#define YY_Lekser_LEX_DEFINED
#endif
#endif

#ifndef YY_Lekser_LEX_PARAM
#ifndef YY_USE_PROTOS
#define YY_Lekser_LEX_PARAM
#else
#define YY_Lekser_LEX_PARAM void
#endif
#else
#ifndef YY_Lekser_LEX_DEFINED
#define YY_Lekser_LEX_DEFINED
#endif
#endif

#ifndef YY_Lekser_LEX_PARAM_DEF
#define YY_Lekser_LEX_PARAM_DEF
#else
#ifndef YY_Lekser_LEX_DEFINED
#define YY_Lekser_LEX_DEFINED
#endif
#endif

#ifndef YY_Lekser_RESTART
#define YY_Lekser_RESTART yyrestart
#endif
#ifndef YY_Lekser_SWITCH_TO_BUFFER
#define YY_Lekser_SWITCH_TO_BUFFER yy_switch_to_buffer
#endif
#ifndef YY_Lekser_LOAD_BUFFER_STATE
#define YY_Lekser_LOAD_BUFFER_STATE yy_load_buffer_state
#endif

#ifndef YY_Lekser_CREATE_BUFFER
#define YY_Lekser_CREATE_BUFFER yy_create_buffer
#ifndef YY_USE_CLASS
#ifndef yy_new_buffer
#define yy_new_buffer yy_create_buffer
#endif
#endif
#endif
#ifndef YY_Lekser_DELETE_BUFFER
#define YY_Lekser_DELETE_BUFFER yy_delete_buffer
#endif
#ifndef YY_Lekser_INIT_BUFFER
#define YY_Lekser_INIT_BUFFER yy_init_buffer
#endif



#ifdef YY_Lekser_FLEX_DEBUG
#ifndef YY_Lekser_DEBUG
#define YY_Lekser_DEBUG 1
#endif
#else
#ifndef YY_Lekser_DEBUG
#define YY_Lekser_DEBUG 0
#endif
#endif

#if YY_Lekser_DEBUG != 0
#ifndef YY_Lekser_DEBUG_FLAG
#define YY_Lekser_DEBUG_FLAG yy_flex_debug
#endif
#ifndef YY_Lekser_DEBUG_INIT
#define YY_Lekser_DEBUG_INIT 1
#endif
#endif




#ifndef YY_USE_CLASS
#ifndef YY_Lekser_CURRENT_BUFFER
#define YY_Lekser_CURRENT_BUFFER yy_current_buffer
#endif
typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern void YY_Lekser_RESTART YY_PROTO(( YY_Lekser_IFILE *input_file ));
extern void YY_Lekser_SWITCH_TO_BUFFER YY_PROTO(( YY_BUFFER_STATE new_buffer ));
extern void YY_Lekser_LOAD_BUFFER_STATE YY_PROTO(( void ));
extern YY_BUFFER_STATE YY_Lekser_CREATE_BUFFER YY_PROTO(( YY_Lekser_IFILE *file, int size ));
extern void YY_Lekser_DELETE_BUFFER YY_PROTO(( YY_BUFFER_STATE b ));
extern void YY_Lekser_INIT_BUFFER YY_PROTO(( YY_BUFFER_STATE b, YY_Lekser_IFILE *file ));

#if YY_Lekser_DEBUG != 0
extern int YY_Lekser_DEBUG_FLAG ;
#endif
extern YY_Lekser_CHAR  *YY_Lekser_TEXT;
extern int YY_Lekser_LENG;
extern YY_Lekser_IFILE *YY_Lekser_IN;
extern YY_Lekser_OFILE *YY_Lekser_OUT;
#ifdef YY_Lekser_LEX_DEFINED
extern YY_Lekser_LEX_RETURN YY_Lekser_LEX ( YY_Lekser_LEX_PARAM )
YY_Lekser_LEX_PARAM_DEF
#else
#ifndef YY_DECL
extern YY_Lekser_LEX_RETURN YY_Lekser_LEX ( YY_Lekser_LEX_PARAM )
YY_Lekser_LEX_PARAM_DEF
#else
/* no declaration if oldstyle flex */
#endif
#endif
#else

#ifndef YY_Lekser_CURRENT_BUFFER
#define YY_Lekser_CURRENT_BUFFER YY_CURRENT_BUFFER
#endif
#ifndef YY_Lekser_CLASS
#define YY_Lekser_CLASS Lekser
#endif
#ifndef YY_Lekser_ECHO
#define YY_Lekser_ECHO yy_echo
#endif
#ifdef YY_Lekser_ECHO_PURE
#define YY_Lekser_ECHO_NOCODE
#endif

#ifndef YY_Lekser_ECHO_CODE
#ifndef YY_Lekser_IOSTREAM
#define YY_Lekser_ECHO_CODE fwrite( (char *) YY_Lekser_TEXT, YY_Lekser_LENG, 1, YY_Lekser_OUT );
#else
#define YY_Lekser_ECHO_CODE (YY_Lekser_OUT->write( (char *) YY_Lekser_TEXT, YY_Lekser_LENG));
#endif
#endif

#ifndef YY_Lekser_INPUT
#define YY_Lekser_INPUT yy_input
#endif
#ifdef YY_Lekser_INPUT_PURE
#define YY_Lekser_INPUT_NOCODE
#endif

#ifndef YY_Lekser_INPUT_CODE
#ifndef YY_Lekser_IOSTREAM
#define YY_Lekser_INPUT_CODE return result= fread(  buffer, 1,max_size,YY_Lekser_IN );
#else
#define YY_Lekser_INPUT_CODE if(YY_Lekser_IN->eof())  result=0;else {YY_Lekser_IN->read(buffer,max_size);result=YY_Lekser_IN->gcount();YY_Lekser_IN->clear(YY_Lekser_IN->rdstate()&(~ios::failbit));if(YY_Lekser_IN->bad()) result= -1;} return result;
#endif
#endif

#ifdef YY_Lekser_FATAL_ERROR_PURE
#define YY_Lekser_FATAL_ERRO_NOCODE
#endif
#ifndef YY_Lekser_FATAL_ERROR
#define YY_Lekser_FATAL_ERROR yy_fatal_error
#endif

#ifndef YY_Lekser_FATAL_ERROR_CODE
#ifndef YY_Lekser_IOSTREAM
#define YY_Lekser_FATAL_ERROR_CODE fputs( msg, YY_Lekser_ERRFILE );putc( '\n', YY_Lekser_ERRFILE );exit( 1 );
#else
#define YY_Lekser_FATAL_ERROR_CODE YY_Lekser_ERRFILE<< msg <<endl;exit( 1 );
#endif
#endif

#ifndef YY_Lekser_WRAP
#define YY_Lekser_WRAP yy_wrap
#endif
#ifdef YY_Lekser_WRAP_PURE
#define YY_Lekser_WRAP_NOCODE
#endif
#ifndef YY_Lekser_WRAP_CODE
#define YY_Lekser_WRAP_CODE return 1;
#endif


#ifndef YY_Lekser_INHERIT
#define YY_Lekser_INHERIT
#endif
#ifndef YY_Lekser_MEMBERS
#define YY_Lekser_MEMBERS
#endif
#ifndef YY_Lekser_CONSTRUCTOR_PARAM
#define YY_Lekser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_Lekser_CONSTRUCTOR_CODE
#define YY_Lekser_CONSTRUCTOR_CODE
#endif
#ifndef YY_Lekser_CONSTRUCTOR_INIT
#define YY_Lekser_CONSTRUCTOR_INIT
#endif
#ifndef YY_Lekser_DESTRUCTOR_CODE
#define YY_Lekser_DESTRUCTOR_CODE
#endif
typedef struct yy_buffer_state *YY_BUFFER_STATE;

class YY_Lekser_CLASS YY_Lekser_INHERIT
{
 private:/* data */
 YY_Lekser_CHAR  *yy_c_buf_p;
 YY_Lekser_CHAR  yy_hold_char;
 int yy_n_chars;
 int yy_init;
 int yy_start;
 int yy_did_buffer_switch_on_eof;
 private: /* functions */
 void yy_initialize();
 int input();
 int yyinput() {return input();};
 int yy_get_next_buffer();
 void yyunput( YY_Lekser_CHAR  c, YY_Lekser_CHAR  *buf_ptr );
 /* use long instead of yy_state_type because it is undef */
 long yy_get_previous_state_ ( void );
 long yy_try_NUL_trans_  ( long current_state_ );
 protected:/* non virtual */
 YY_BUFFER_STATE YY_Lekser_CURRENT_BUFFER;
 void YY_Lekser_RESTART ( YY_Lekser_IFILE *input_file );
 void YY_Lekser_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer );
 void YY_Lekser_LOAD_BUFFER_STATE( void );
 YY_BUFFER_STATE YY_Lekser_CREATE_BUFFER( YY_Lekser_IFILE *file, int size );
 void YY_Lekser_DELETE_BUFFER( YY_BUFFER_STATE b );
 void YY_Lekser_INIT_BUFFER( YY_BUFFER_STATE b, YY_Lekser_IFILE *file );
 protected: /* virtual */
 virtual void YY_Lekser_ECHO()
#ifdef YY_Lekser_ECHO_PURE
  =0
#endif
  ;
 virtual int  YY_Lekser_INPUT(char  *buf,int &result,int max_size)
#ifdef YY_Lekser_INPUT_PURE
  =0
#endif
  ;
 virtual void  YY_Lekser_FATAL_ERROR(char *msg)
#ifdef YY_Lekser_FATAL_ERROR_PURE
  =0
#endif
  ;
 virtual int  YY_Lekser_WRAP()
#ifdef YY_Lekser_WRAP_PURE
  =0
#endif
  ;
 public:
 YY_Lekser_CHAR  *YY_Lekser_TEXT;
 int YY_Lekser_LENG;
 YY_Lekser_IFILE *YY_Lekser_IN;
 YY_Lekser_OFILE *YY_Lekser_OUT;
 YY_Lekser_LEX_RETURN YY_Lekser_LEX ( YY_Lekser_LEX_PARAM);
 YY_Lekser_CLASS(YY_Lekser_CONSTRUCTOR_PARAM) ;
 virtual ~YY_Lekser_CLASS() ;
#if YY_Lekser_DEBUG != 0
 int YY_Lekser_DEBUG_FLAG;
#endif
 public: /* added members */
 YY_Lekser_MEMBERS
};
#endif



/* declaration of externs for public use of yylex scanner */

/* % here is the declaration from section2 %header{ */
#line 104 "interpreter.l"
#endif
#line 375 "C:\\Documents and Settings\\\37777777643ukaszek\\Moje dokumenty\\XBuilder Projekty\\Interpreter\\bison++ flex++\\flexskel.h"

/* end of generated header */
