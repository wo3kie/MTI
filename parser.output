

Terminals which are not used:

   MAIN
   UMINUS


Conflict in state 139 between rule 32 and token ELSE resolved as shift.

Grammar
rule 1    program -> declarationList functionList
rule 2    program -> functionList
rule 3    declarationList -> declarationList declaration
rule 4    declarationList -> declaration
rule 5    declaration -> DOUBLE identifier ';'
rule 6    declaration -> DOUBLE identifier '=' number ';'
rule 7    declaration -> STRING identifier ';'
rule 8    declaration -> STRING identifier '=' textLiteral ';'
rule 9    functionList -> functionList functionDefinition
rule 10   functionList -> functionDefinition
rule 11   functionDefinition -> DOUBLE identifier '(' parameterList ')' instruction
rule 12   functionDefinition -> STRING identifier '(' parameterList ')' instruction
rule 13   parameterList -> parameterList ',' parameter
rule 14   parameterList -> parameter
rule 15   parameterList ->		/* empty */
rule 16   parameter -> DOUBLE identifier
rule 17   parameter -> STRING identifier
rule 18   instruction -> assignmentInstruction
rule 19   instruction -> complexInstruction
rule 20   instruction -> ifStatement
rule 21   instruction -> whileInstruction
rule 22   instruction -> returnInstruction
rule 23   instruction -> printInstruction
rule 24   instruction -> scanInstruction
rule 25   instruction -> declaration
rule 26   instruction -> functionCall ';'
rule 27   complexInstruction -> '{' instructionList '}'
rule 28   instructionList -> instructionList instruction
rule 29   instructionList -> instruction
rule 30   assignmentInstruction -> identifier '=' expression ';'
rule 31   assignmentInstruction -> SCOPE_OPERATOR identifier '=' expression ';'
rule 32   ifStatement -> IF '(' expression ')' instruction
rule 33   ifStatement -> IF '(' expression ')' instruction ELSE instruction
rule 34   whileInstruction -> WHILE '(' expression ')' instruction
rule 35   returnInstruction -> RETURN expression ';'
rule 36   printInstruction -> PRINTF '(' expression ')' ';'
rule 37   printInstruction -> PRINTF '(' ENDL ')' ';'
rule 38   scanInstruction -> SCANF '(' localVariable ')' ';'
rule 39   scanInstruction -> SCANF '(' globalVariable ')' ';'
rule 40   expression -> expression '<' simpleExpression
rule 41   expression -> expression '>' simpleExpression
rule 42   expression -> expression EQ simpleExpression
rule 43   expression -> expression NEQ simpleExpression
rule 44   expression -> expression OR simpleExpression
rule 45   expression -> expression AND simpleExpression
rule 46   expression -> simpleExpression
rule 47   simpleExpression -> simpleExpression '+' unit
rule 48   simpleExpression -> simpleExpression '-' unit
rule 49   simpleExpression -> unit
rule 50   unit -> unit '*' unaryFactor
rule 51   unit -> unit '/' unaryFactor
rule 52   unit -> unaryFactor
rule 53   unaryFactor -> factor
rule 54   unaryFactor -> '+' factor
rule 55   unaryFactor -> '-' factor
rule 56   factor -> localVariable
rule 57   factor -> globalVariable
rule 58   factor -> functionCall
rule 59   factor -> number
rule 60   factor -> textLiteral
rule 61   factor -> bracket
rule 62   localVariable -> identifier
rule 63   globalVariable -> SCOPE_OPERATOR identifier
rule 64   functionCall -> identifier '(' expressionList ')'
rule 65   expressionList -> expressionList ',' expression
rule 66   expressionList -> expression
rule 67   expressionList ->		/* empty */
rule 68   bracket -> '(' expression ')'
rule 69   textLiteral -> TEXTLITERAL
rule 70   number -> NUMBER
rule 71   identifier -> IDENTIFIER

Terminals, with rules where they appear

$ (-1)
'(' (40) 11 12 32 33 34 36 37 38 39 64 68
')' (41) 11 12 32 33 34 36 37 38 39 64 68
'*' (42) 50
'+' (43) 47 54
',' (44) 13 65
'-' (45) 48 55
'/' (47) 51
';' (59) 5 6 7 8 26 30 31 35 36 37 38 39
'<' (60) 40
'=' (61) 6 8 30 31
'>' (62) 41
'{' (123) 27
'}' (125) 27
error (256)
NUMBER (258) 70
IDENTIFIER (259) 71
TEXTLITERAL (260) 69
DOUBLE (261) 5 6 11 16
STRING (262) 7 8 12 17
WHILE (263) 34
IF (264) 32 33
RETURN (265) 35
MAIN (266)
PRINTF (267) 36 37
SCANF (268) 38 39
ENDL (269) 37
IFX (270)
ELSE (271) 33
EQ (272) 42
NEQ (273) 43
OR (274) 44
AND (275) 45
UMINUS (276)
SCOPE_OPERATOR (277) 31 63

Nonterminals, with rules where they appear

program (36)
    on left: 1 2
declarationList (37)
    on left: 3 4, on right: 1 3
declaration (38)
    on left: 5 6 7 8, on right: 3 4 25
functionList (39)
    on left: 9 10, on right: 1 2 9
functionDefinition (40)
    on left: 11 12, on right: 9 10
parameterList (41)
    on left: 13 14 15, on right: 11 12 13
parameter (42)
    on left: 16 17, on right: 13 14
instruction (43)
    on left: 18 19 20 21 22 23 24 25 26, on right: 11 12 28 29 32 33
    34
complexInstruction (44)
    on left: 27, on right: 19
instructionList (45)
    on left: 28 29, on right: 27 28
assignmentInstruction (46)
    on left: 30 31, on right: 18
ifStatement (47)
    on left: 32 33, on right: 20
whileInstruction (48)
    on left: 34, on right: 21
returnInstruction (49)
    on left: 35, on right: 22
printInstruction (50)
    on left: 36 37, on right: 23
scanInstruction (51)
    on left: 38 39, on right: 24
expression (52)
    on left: 40 41 42 43 44 45 46, on right: 30 31 32 33 34 35 36 40
    41 42 43 44 45 65 66 68
simpleExpression (53)
    on left: 47 48 49, on right: 40 41 42 43 44 45 46 47 48
unit (54)
    on left: 50 51 52, on right: 47 48 49 50 51
unaryFactor (55)
    on left: 53 54 55, on right: 50 51 52
factor (56)
    on left: 56 57 58 59 60 61, on right: 53 54 55
localVariable (57)
    on left: 62, on right: 38 56
globalVariable (58)
    on left: 63, on right: 39 57
functionCall (59)
    on left: 64, on right: 26 58
expressionList (60)
    on left: 65 66 67, on right: 64 65
bracket (61)
    on left: 68, on right: 61
textLiteral (62)
    on left: 69, on right: 8 60
number (63)
    on left: 70, on right: 6 59
identifier (64)
    on left: 71, on right: 5 6 7 8 11 12 16 17 30 31 62 63 64


state 0

    DOUBLE	shift, and go to state 1
    STRING	shift, and go to state 2

    program	go to state 148
    declarationList	go to state 3
    declaration	go to state 4
    functionList	go to state 5
    functionDefinition	go to state 6



state 1

    declaration  ->  DOUBLE . identifier ';'   (rule 5)
    declaration  ->  DOUBLE . identifier '=' number ';'   (rule 6)
    functionDefinition  ->  DOUBLE . identifier '(' parameterList ')' instruction   (rule 11)

    IDENTIFIER	shift, and go to state 7

    identifier	go to state 8



state 2

    declaration  ->  STRING . identifier ';'   (rule 7)
    declaration  ->  STRING . identifier '=' textLiteral ';'   (rule 8)
    functionDefinition  ->  STRING . identifier '(' parameterList ')' instruction   (rule 12)

    IDENTIFIER	shift, and go to state 7

    identifier	go to state 9



state 3

    program  ->  declarationList . functionList   (rule 1)
    declarationList  ->  declarationList . declaration   (rule 3)

    DOUBLE	shift, and go to state 1
    STRING	shift, and go to state 2

    declaration	go to state 10
    functionList	go to state 11
    functionDefinition	go to state 6



state 4

    declarationList  ->  declaration .   (rule 4)

    $default	reduce using rule 4 (declarationList)



state 5

    program  ->  functionList .   (rule 2)
    functionList  ->  functionList . functionDefinition   (rule 9)

    DOUBLE	shift, and go to state 12
    STRING	shift, and go to state 13

    $default	reduce using rule 2 (program)

    functionDefinition	go to state 14



state 6

    functionList  ->  functionDefinition .   (rule 10)

    $default	reduce using rule 10 (functionList)



state 7

    identifier  ->  IDENTIFIER .   (rule 71)

    $default	reduce using rule 71 (identifier)



state 8

    declaration  ->  DOUBLE identifier . ';'   (rule 5)
    declaration  ->  DOUBLE identifier . '=' number ';'   (rule 6)
    functionDefinition  ->  DOUBLE identifier . '(' parameterList ')' instruction   (rule 11)

    ';' 	shift, and go to state 15
    '=' 	shift, and go to state 16
    '(' 	shift, and go to state 17



state 9

    declaration  ->  STRING identifier . ';'   (rule 7)
    declaration  ->  STRING identifier . '=' textLiteral ';'   (rule 8)
    functionDefinition  ->  STRING identifier . '(' parameterList ')' instruction   (rule 12)

    ';' 	shift, and go to state 18
    '=' 	shift, and go to state 19
    '(' 	shift, and go to state 20



state 10

    declarationList  ->  declarationList declaration .   (rule 3)

    $default	reduce using rule 3 (declarationList)



state 11

    program  ->  declarationList functionList .   (rule 1)
    functionList  ->  functionList . functionDefinition   (rule 9)

    DOUBLE	shift, and go to state 12
    STRING	shift, and go to state 13

    $default	reduce using rule 1 (program)

    functionDefinition	go to state 14



state 12

    functionDefinition  ->  DOUBLE . identifier '(' parameterList ')' instruction   (rule 11)

    IDENTIFIER	shift, and go to state 7

    identifier	go to state 21



state 13

    functionDefinition  ->  STRING . identifier '(' parameterList ')' instruction   (rule 12)

    IDENTIFIER	shift, and go to state 7

    identifier	go to state 22



state 14

    functionList  ->  functionList functionDefinition .   (rule 9)

    $default	reduce using rule 9 (functionList)



state 15

    declaration  ->  DOUBLE identifier ';' .   (rule 5)

    $default	reduce using rule 5 (declaration)



state 16

    declaration  ->  DOUBLE identifier '=' . number ';'   (rule 6)

    NUMBER	shift, and go to state 23

    number	go to state 24



state 17

    functionDefinition  ->  DOUBLE identifier '(' . parameterList ')' instruction   (rule 11)

    DOUBLE	shift, and go to state 25
    STRING	shift, and go to state 26

    $default	reduce using rule 15 (parameterList)

    parameterList	go to state 27
    parameter	go to state 28



state 18

    declaration  ->  STRING identifier ';' .   (rule 7)

    $default	reduce using rule 7 (declaration)



state 19

    declaration  ->  STRING identifier '=' . textLiteral ';'   (rule 8)

    TEXTLITERAL	shift, and go to state 29

    textLiteral	go to state 30



state 20

    functionDefinition  ->  STRING identifier '(' . parameterList ')' instruction   (rule 12)

    DOUBLE	shift, and go to state 25
    STRING	shift, and go to state 26

    $default	reduce using rule 15 (parameterList)

    parameterList	go to state 31
    parameter	go to state 28



state 21

    functionDefinition  ->  DOUBLE identifier . '(' parameterList ')' instruction   (rule 11)

    '(' 	shift, and go to state 17



state 22

    functionDefinition  ->  STRING identifier . '(' parameterList ')' instruction   (rule 12)

    '(' 	shift, and go to state 20



state 23

    number  ->  NUMBER .   (rule 70)

    $default	reduce using rule 70 (number)



state 24

    declaration  ->  DOUBLE identifier '=' number . ';'   (rule 6)

    ';' 	shift, and go to state 32



state 25

    parameter  ->  DOUBLE . identifier   (rule 16)

    IDENTIFIER	shift, and go to state 7

    identifier	go to state 33



state 26

    parameter  ->  STRING . identifier   (rule 17)

    IDENTIFIER	shift, and go to state 7

    identifier	go to state 34



state 27

    functionDefinition  ->  DOUBLE identifier '(' parameterList . ')' instruction   (rule 11)
    parameterList  ->  parameterList . ',' parameter   (rule 13)

    ')' 	shift, and go to state 35
    ',' 	shift, and go to state 36



state 28

    parameterList  ->  parameter .   (rule 14)

    $default	reduce using rule 14 (parameterList)



state 29

    textLiteral  ->  TEXTLITERAL .   (rule 69)

    $default	reduce using rule 69 (textLiteral)



state 30

    declaration  ->  STRING identifier '=' textLiteral . ';'   (rule 8)

    ';' 	shift, and go to state 37



state 31

    functionDefinition  ->  STRING identifier '(' parameterList . ')' instruction   (rule 12)
    parameterList  ->  parameterList . ',' parameter   (rule 13)

    ')' 	shift, and go to state 38
    ',' 	shift, and go to state 36



state 32

    declaration  ->  DOUBLE identifier '=' number ';' .   (rule 6)

    $default	reduce using rule 6 (declaration)



state 33

    parameter  ->  DOUBLE identifier .   (rule 16)

    $default	reduce using rule 16 (parameter)



state 34

    parameter  ->  STRING identifier .   (rule 17)

    $default	reduce using rule 17 (parameter)



state 35

    functionDefinition  ->  DOUBLE identifier '(' parameterList ')' . instruction   (rule 11)

    IDENTIFIER	shift, and go to state 7
    DOUBLE	shift, and go to state 39
    STRING	shift, and go to state 40
    WHILE	shift, and go to state 41
    IF  	shift, and go to state 42
    RETURN	shift, and go to state 43
    PRINTF	shift, and go to state 44
    SCANF	shift, and go to state 45
    SCOPE_OPERATOR	shift, and go to state 46
    '{' 	shift, and go to state 47

    declaration	go to state 48
    instruction	go to state 49
    complexInstruction	go to state 50
    assignmentInstruction	go to state 51
    ifStatement	go to state 52
    whileInstruction	go to state 53
    returnInstruction	go to state 54
    printInstruction	go to state 55
    scanInstruction	go to state 56
    functionCall	go to state 57
    identifier	go to state 58



state 36

    parameterList  ->  parameterList ',' . parameter   (rule 13)

    DOUBLE	shift, and go to state 25
    STRING	shift, and go to state 26

    parameter	go to state 59



state 37

    declaration  ->  STRING identifier '=' textLiteral ';' .   (rule 8)

    $default	reduce using rule 8 (declaration)



state 38

    functionDefinition  ->  STRING identifier '(' parameterList ')' . instruction   (rule 12)

    IDENTIFIER	shift, and go to state 7
    DOUBLE	shift, and go to state 39
    STRING	shift, and go to state 40
    WHILE	shift, and go to state 41
    IF  	shift, and go to state 42
    RETURN	shift, and go to state 43
    PRINTF	shift, and go to state 44
    SCANF	shift, and go to state 45
    SCOPE_OPERATOR	shift, and go to state 46
    '{' 	shift, and go to state 47

    declaration	go to state 48
    instruction	go to state 60
    complexInstruction	go to state 50
    assignmentInstruction	go to state 51
    ifStatement	go to state 52
    whileInstruction	go to state 53
    returnInstruction	go to state 54
    printInstruction	go to state 55
    scanInstruction	go to state 56
    functionCall	go to state 57
    identifier	go to state 58



state 39

    declaration  ->  DOUBLE . identifier ';'   (rule 5)
    declaration  ->  DOUBLE . identifier '=' number ';'   (rule 6)

    IDENTIFIER	shift, and go to state 7

    identifier	go to state 61



state 40

    declaration  ->  STRING . identifier ';'   (rule 7)
    declaration  ->  STRING . identifier '=' textLiteral ';'   (rule 8)

    IDENTIFIER	shift, and go to state 7

    identifier	go to state 62



state 41

    whileInstruction  ->  WHILE . '(' expression ')' instruction   (rule 34)

    '(' 	shift, and go to state 63



state 42

    ifStatement  ->  IF . '(' expression ')' instruction   (rule 32)
    ifStatement  ->  IF . '(' expression ')' instruction ELSE instruction   (rule 33)

    '(' 	shift, and go to state 64



state 43

    returnInstruction  ->  RETURN . expression ';'   (rule 35)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    expression	go to state 69
    simpleExpression	go to state 70
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 44

    printInstruction  ->  PRINTF . '(' expression ')' ';'   (rule 36)
    printInstruction  ->  PRINTF . '(' ENDL ')' ';'   (rule 37)

    '(' 	shift, and go to state 81



state 45

    scanInstruction  ->  SCANF . '(' localVariable ')' ';'   (rule 38)
    scanInstruction  ->  SCANF . '(' globalVariable ')' ';'   (rule 39)

    '(' 	shift, and go to state 82



state 46

    assignmentInstruction  ->  SCOPE_OPERATOR . identifier '=' expression ';'   (rule 31)

    IDENTIFIER	shift, and go to state 7

    identifier	go to state 83



state 47

    complexInstruction  ->  '{' . instructionList '}'   (rule 27)

    IDENTIFIER	shift, and go to state 7
    DOUBLE	shift, and go to state 39
    STRING	shift, and go to state 40
    WHILE	shift, and go to state 41
    IF  	shift, and go to state 42
    RETURN	shift, and go to state 43
    PRINTF	shift, and go to state 44
    SCANF	shift, and go to state 45
    SCOPE_OPERATOR	shift, and go to state 46
    '{' 	shift, and go to state 47

    declaration	go to state 48
    instruction	go to state 84
    complexInstruction	go to state 50
    instructionList	go to state 85
    assignmentInstruction	go to state 51
    ifStatement	go to state 52
    whileInstruction	go to state 53
    returnInstruction	go to state 54
    printInstruction	go to state 55
    scanInstruction	go to state 56
    functionCall	go to state 57
    identifier	go to state 58



state 48

    instruction  ->  declaration .   (rule 25)

    $default	reduce using rule 25 (instruction)



state 49

    functionDefinition  ->  DOUBLE identifier '(' parameterList ')' instruction .   (rule 11)

    $default	reduce using rule 11 (functionDefinition)



state 50

    instruction  ->  complexInstruction .   (rule 19)

    $default	reduce using rule 19 (instruction)



state 51

    instruction  ->  assignmentInstruction .   (rule 18)

    $default	reduce using rule 18 (instruction)



state 52

    instruction  ->  ifStatement .   (rule 20)

    $default	reduce using rule 20 (instruction)



state 53

    instruction  ->  whileInstruction .   (rule 21)

    $default	reduce using rule 21 (instruction)



state 54

    instruction  ->  returnInstruction .   (rule 22)

    $default	reduce using rule 22 (instruction)



state 55

    instruction  ->  printInstruction .   (rule 23)

    $default	reduce using rule 23 (instruction)



state 56

    instruction  ->  scanInstruction .   (rule 24)

    $default	reduce using rule 24 (instruction)



state 57

    instruction  ->  functionCall . ';'   (rule 26)

    ';' 	shift, and go to state 86



state 58

    assignmentInstruction  ->  identifier . '=' expression ';'   (rule 30)
    functionCall  ->  identifier . '(' expressionList ')'   (rule 64)

    '=' 	shift, and go to state 87
    '(' 	shift, and go to state 88



state 59

    parameterList  ->  parameterList ',' parameter .   (rule 13)

    $default	reduce using rule 13 (parameterList)



state 60

    functionDefinition  ->  STRING identifier '(' parameterList ')' instruction .   (rule 12)

    $default	reduce using rule 12 (functionDefinition)



state 61

    declaration  ->  DOUBLE identifier . ';'   (rule 5)
    declaration  ->  DOUBLE identifier . '=' number ';'   (rule 6)

    ';' 	shift, and go to state 15
    '=' 	shift, and go to state 16



state 62

    declaration  ->  STRING identifier . ';'   (rule 7)
    declaration  ->  STRING identifier . '=' textLiteral ';'   (rule 8)

    ';' 	shift, and go to state 18
    '=' 	shift, and go to state 19



state 63

    whileInstruction  ->  WHILE '(' . expression ')' instruction   (rule 34)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    expression	go to state 89
    simpleExpression	go to state 70
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 64

    ifStatement  ->  IF '(' . expression ')' instruction   (rule 32)
    ifStatement  ->  IF '(' . expression ')' instruction ELSE instruction   (rule 33)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    expression	go to state 90
    simpleExpression	go to state 70
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 65

    unaryFactor  ->  '+' . factor   (rule 54)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    factor	go to state 91
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 66

    unaryFactor  ->  '-' . factor   (rule 55)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    factor	go to state 92
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 67

    globalVariable  ->  SCOPE_OPERATOR . identifier   (rule 63)

    IDENTIFIER	shift, and go to state 7

    identifier	go to state 93



state 68

    bracket  ->  '(' . expression ')'   (rule 68)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    expression	go to state 94
    simpleExpression	go to state 70
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 69

    returnInstruction  ->  RETURN expression . ';'   (rule 35)
    expression  ->  expression . '<' simpleExpression   (rule 40)
    expression  ->  expression . '>' simpleExpression   (rule 41)
    expression  ->  expression . EQ simpleExpression   (rule 42)
    expression  ->  expression . NEQ simpleExpression   (rule 43)
    expression  ->  expression . OR simpleExpression   (rule 44)
    expression  ->  expression . AND simpleExpression   (rule 45)

    '>' 	shift, and go to state 95
    '<' 	shift, and go to state 96
    EQ  	shift, and go to state 97
    NEQ 	shift, and go to state 98
    OR  	shift, and go to state 99
    AND 	shift, and go to state 100
    ';' 	shift, and go to state 101



state 70

    expression  ->  simpleExpression .   (rule 46)
    simpleExpression  ->  simpleExpression . '+' unit   (rule 47)
    simpleExpression  ->  simpleExpression . '-' unit   (rule 48)

    '+' 	shift, and go to state 102
    '-' 	shift, and go to state 103

    $default	reduce using rule 46 (expression)



state 71

    simpleExpression  ->  unit .   (rule 49)
    unit  ->  unit . '*' unaryFactor   (rule 50)
    unit  ->  unit . '/' unaryFactor   (rule 51)

    '*' 	shift, and go to state 104
    '/' 	shift, and go to state 105

    $default	reduce using rule 49 (simpleExpression)



state 72

    unit  ->  unaryFactor .   (rule 52)

    $default	reduce using rule 52 (unit)



state 73

    unaryFactor  ->  factor .   (rule 53)

    $default	reduce using rule 53 (unaryFactor)



state 74

    factor  ->  localVariable .   (rule 56)

    $default	reduce using rule 56 (factor)



state 75

    factor  ->  globalVariable .   (rule 57)

    $default	reduce using rule 57 (factor)



state 76

    factor  ->  functionCall .   (rule 58)

    $default	reduce using rule 58 (factor)



state 77

    factor  ->  bracket .   (rule 61)

    $default	reduce using rule 61 (factor)



state 78

    factor  ->  textLiteral .   (rule 60)

    $default	reduce using rule 60 (factor)



state 79

    factor  ->  number .   (rule 59)

    $default	reduce using rule 59 (factor)



state 80

    localVariable  ->  identifier .   (rule 62)
    functionCall  ->  identifier . '(' expressionList ')'   (rule 64)

    '(' 	shift, and go to state 88

    $default	reduce using rule 62 (localVariable)



state 81

    printInstruction  ->  PRINTF '(' . expression ')' ';'   (rule 36)
    printInstruction  ->  PRINTF '(' . ENDL ')' ';'   (rule 37)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    ENDL	shift, and go to state 106
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    expression	go to state 107
    simpleExpression	go to state 70
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 82

    scanInstruction  ->  SCANF '(' . localVariable ')' ';'   (rule 38)
    scanInstruction  ->  SCANF '(' . globalVariable ')' ';'   (rule 39)

    IDENTIFIER	shift, and go to state 7
    SCOPE_OPERATOR	shift, and go to state 67

    localVariable	go to state 108
    globalVariable	go to state 109
    identifier	go to state 110



state 83

    assignmentInstruction  ->  SCOPE_OPERATOR identifier . '=' expression ';'   (rule 31)

    '=' 	shift, and go to state 111



state 84

    instructionList  ->  instruction .   (rule 29)

    $default	reduce using rule 29 (instructionList)



state 85

    complexInstruction  ->  '{' instructionList . '}'   (rule 27)
    instructionList  ->  instructionList . instruction   (rule 28)

    IDENTIFIER	shift, and go to state 7
    DOUBLE	shift, and go to state 39
    STRING	shift, and go to state 40
    WHILE	shift, and go to state 41
    IF  	shift, and go to state 42
    RETURN	shift, and go to state 43
    PRINTF	shift, and go to state 44
    SCANF	shift, and go to state 45
    SCOPE_OPERATOR	shift, and go to state 46
    '{' 	shift, and go to state 47
    '}' 	shift, and go to state 112

    declaration	go to state 48
    instruction	go to state 113
    complexInstruction	go to state 50
    assignmentInstruction	go to state 51
    ifStatement	go to state 52
    whileInstruction	go to state 53
    returnInstruction	go to state 54
    printInstruction	go to state 55
    scanInstruction	go to state 56
    functionCall	go to state 57
    identifier	go to state 58



state 86

    instruction  ->  functionCall ';' .   (rule 26)

    $default	reduce using rule 26 (instruction)



state 87

    assignmentInstruction  ->  identifier '=' . expression ';'   (rule 30)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    expression	go to state 114
    simpleExpression	go to state 70
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 88

    functionCall  ->  identifier '(' . expressionList ')'   (rule 64)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    $default	reduce using rule 67 (expressionList)

    expression	go to state 115
    simpleExpression	go to state 70
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    expressionList	go to state 116
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 89

    whileInstruction  ->  WHILE '(' expression . ')' instruction   (rule 34)
    expression  ->  expression . '<' simpleExpression   (rule 40)
    expression  ->  expression . '>' simpleExpression   (rule 41)
    expression  ->  expression . EQ simpleExpression   (rule 42)
    expression  ->  expression . NEQ simpleExpression   (rule 43)
    expression  ->  expression . OR simpleExpression   (rule 44)
    expression  ->  expression . AND simpleExpression   (rule 45)

    '>' 	shift, and go to state 95
    '<' 	shift, and go to state 96
    EQ  	shift, and go to state 97
    NEQ 	shift, and go to state 98
    OR  	shift, and go to state 99
    AND 	shift, and go to state 100
    ')' 	shift, and go to state 117



state 90

    ifStatement  ->  IF '(' expression . ')' instruction   (rule 32)
    ifStatement  ->  IF '(' expression . ')' instruction ELSE instruction   (rule 33)
    expression  ->  expression . '<' simpleExpression   (rule 40)
    expression  ->  expression . '>' simpleExpression   (rule 41)
    expression  ->  expression . EQ simpleExpression   (rule 42)
    expression  ->  expression . NEQ simpleExpression   (rule 43)
    expression  ->  expression . OR simpleExpression   (rule 44)
    expression  ->  expression . AND simpleExpression   (rule 45)

    '>' 	shift, and go to state 95
    '<' 	shift, and go to state 96
    EQ  	shift, and go to state 97
    NEQ 	shift, and go to state 98
    OR  	shift, and go to state 99
    AND 	shift, and go to state 100
    ')' 	shift, and go to state 118



state 91

    unaryFactor  ->  '+' factor .   (rule 54)

    $default	reduce using rule 54 (unaryFactor)



state 92

    unaryFactor  ->  '-' factor .   (rule 55)

    $default	reduce using rule 55 (unaryFactor)



state 93

    globalVariable  ->  SCOPE_OPERATOR identifier .   (rule 63)

    $default	reduce using rule 63 (globalVariable)



state 94

    expression  ->  expression . '<' simpleExpression   (rule 40)
    expression  ->  expression . '>' simpleExpression   (rule 41)
    expression  ->  expression . EQ simpleExpression   (rule 42)
    expression  ->  expression . NEQ simpleExpression   (rule 43)
    expression  ->  expression . OR simpleExpression   (rule 44)
    expression  ->  expression . AND simpleExpression   (rule 45)
    bracket  ->  '(' expression . ')'   (rule 68)

    '>' 	shift, and go to state 95
    '<' 	shift, and go to state 96
    EQ  	shift, and go to state 97
    NEQ 	shift, and go to state 98
    OR  	shift, and go to state 99
    AND 	shift, and go to state 100
    ')' 	shift, and go to state 119



state 95

    expression  ->  expression '>' . simpleExpression   (rule 41)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    simpleExpression	go to state 120
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 96

    expression  ->  expression '<' . simpleExpression   (rule 40)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    simpleExpression	go to state 121
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 97

    expression  ->  expression EQ . simpleExpression   (rule 42)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    simpleExpression	go to state 122
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 98

    expression  ->  expression NEQ . simpleExpression   (rule 43)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    simpleExpression	go to state 123
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 99

    expression  ->  expression OR . simpleExpression   (rule 44)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    simpleExpression	go to state 124
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 100

    expression  ->  expression AND . simpleExpression   (rule 45)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    simpleExpression	go to state 125
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 101

    returnInstruction  ->  RETURN expression ';' .   (rule 35)

    $default	reduce using rule 35 (returnInstruction)



state 102

    simpleExpression  ->  simpleExpression '+' . unit   (rule 47)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    unit	go to state 126
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 103

    simpleExpression  ->  simpleExpression '-' . unit   (rule 48)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    unit	go to state 127
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 104

    unit  ->  unit '*' . unaryFactor   (rule 50)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    unaryFactor	go to state 128
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 105

    unit  ->  unit '/' . unaryFactor   (rule 51)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    unaryFactor	go to state 129
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 106

    printInstruction  ->  PRINTF '(' ENDL . ')' ';'   (rule 37)

    ')' 	shift, and go to state 130



state 107

    printInstruction  ->  PRINTF '(' expression . ')' ';'   (rule 36)
    expression  ->  expression . '<' simpleExpression   (rule 40)
    expression  ->  expression . '>' simpleExpression   (rule 41)
    expression  ->  expression . EQ simpleExpression   (rule 42)
    expression  ->  expression . NEQ simpleExpression   (rule 43)
    expression  ->  expression . OR simpleExpression   (rule 44)
    expression  ->  expression . AND simpleExpression   (rule 45)

    '>' 	shift, and go to state 95
    '<' 	shift, and go to state 96
    EQ  	shift, and go to state 97
    NEQ 	shift, and go to state 98
    OR  	shift, and go to state 99
    AND 	shift, and go to state 100
    ')' 	shift, and go to state 131



state 108

    scanInstruction  ->  SCANF '(' localVariable . ')' ';'   (rule 38)

    ')' 	shift, and go to state 132



state 109

    scanInstruction  ->  SCANF '(' globalVariable . ')' ';'   (rule 39)

    ')' 	shift, and go to state 133



state 110

    localVariable  ->  identifier .   (rule 62)

    $default	reduce using rule 62 (localVariable)



state 111

    assignmentInstruction  ->  SCOPE_OPERATOR identifier '=' . expression ';'   (rule 31)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    expression	go to state 134
    simpleExpression	go to state 70
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 112

    complexInstruction  ->  '{' instructionList '}' .   (rule 27)

    $default	reduce using rule 27 (complexInstruction)



state 113

    instructionList  ->  instructionList instruction .   (rule 28)

    $default	reduce using rule 28 (instructionList)



state 114

    assignmentInstruction  ->  identifier '=' expression . ';'   (rule 30)
    expression  ->  expression . '<' simpleExpression   (rule 40)
    expression  ->  expression . '>' simpleExpression   (rule 41)
    expression  ->  expression . EQ simpleExpression   (rule 42)
    expression  ->  expression . NEQ simpleExpression   (rule 43)
    expression  ->  expression . OR simpleExpression   (rule 44)
    expression  ->  expression . AND simpleExpression   (rule 45)

    '>' 	shift, and go to state 95
    '<' 	shift, and go to state 96
    EQ  	shift, and go to state 97
    NEQ 	shift, and go to state 98
    OR  	shift, and go to state 99
    AND 	shift, and go to state 100
    ';' 	shift, and go to state 135



state 115

    expression  ->  expression . '<' simpleExpression   (rule 40)
    expression  ->  expression . '>' simpleExpression   (rule 41)
    expression  ->  expression . EQ simpleExpression   (rule 42)
    expression  ->  expression . NEQ simpleExpression   (rule 43)
    expression  ->  expression . OR simpleExpression   (rule 44)
    expression  ->  expression . AND simpleExpression   (rule 45)
    expressionList  ->  expression .   (rule 66)

    '>' 	shift, and go to state 95
    '<' 	shift, and go to state 96
    EQ  	shift, and go to state 97
    NEQ 	shift, and go to state 98
    OR  	shift, and go to state 99
    AND 	shift, and go to state 100

    $default	reduce using rule 66 (expressionList)



state 116

    functionCall  ->  identifier '(' expressionList . ')'   (rule 64)
    expressionList  ->  expressionList . ',' expression   (rule 65)

    ')' 	shift, and go to state 136
    ',' 	shift, and go to state 137



state 117

    whileInstruction  ->  WHILE '(' expression ')' . instruction   (rule 34)

    IDENTIFIER	shift, and go to state 7
    DOUBLE	shift, and go to state 39
    STRING	shift, and go to state 40
    WHILE	shift, and go to state 41
    IF  	shift, and go to state 42
    RETURN	shift, and go to state 43
    PRINTF	shift, and go to state 44
    SCANF	shift, and go to state 45
    SCOPE_OPERATOR	shift, and go to state 46
    '{' 	shift, and go to state 47

    declaration	go to state 48
    instruction	go to state 138
    complexInstruction	go to state 50
    assignmentInstruction	go to state 51
    ifStatement	go to state 52
    whileInstruction	go to state 53
    returnInstruction	go to state 54
    printInstruction	go to state 55
    scanInstruction	go to state 56
    functionCall	go to state 57
    identifier	go to state 58



state 118

    ifStatement  ->  IF '(' expression ')' . instruction   (rule 32)
    ifStatement  ->  IF '(' expression ')' . instruction ELSE instruction   (rule 33)

    IDENTIFIER	shift, and go to state 7
    DOUBLE	shift, and go to state 39
    STRING	shift, and go to state 40
    WHILE	shift, and go to state 41
    IF  	shift, and go to state 42
    RETURN	shift, and go to state 43
    PRINTF	shift, and go to state 44
    SCANF	shift, and go to state 45
    SCOPE_OPERATOR	shift, and go to state 46
    '{' 	shift, and go to state 47

    declaration	go to state 48
    instruction	go to state 139
    complexInstruction	go to state 50
    assignmentInstruction	go to state 51
    ifStatement	go to state 52
    whileInstruction	go to state 53
    returnInstruction	go to state 54
    printInstruction	go to state 55
    scanInstruction	go to state 56
    functionCall	go to state 57
    identifier	go to state 58



state 119

    bracket  ->  '(' expression ')' .   (rule 68)

    $default	reduce using rule 68 (bracket)



state 120

    expression  ->  expression '>' simpleExpression .   (rule 41)
    simpleExpression  ->  simpleExpression . '+' unit   (rule 47)
    simpleExpression  ->  simpleExpression . '-' unit   (rule 48)

    '+' 	shift, and go to state 102
    '-' 	shift, and go to state 103

    $default	reduce using rule 41 (expression)



state 121

    expression  ->  expression '<' simpleExpression .   (rule 40)
    simpleExpression  ->  simpleExpression . '+' unit   (rule 47)
    simpleExpression  ->  simpleExpression . '-' unit   (rule 48)

    '+' 	shift, and go to state 102
    '-' 	shift, and go to state 103

    $default	reduce using rule 40 (expression)



state 122

    expression  ->  expression EQ simpleExpression .   (rule 42)
    simpleExpression  ->  simpleExpression . '+' unit   (rule 47)
    simpleExpression  ->  simpleExpression . '-' unit   (rule 48)

    '+' 	shift, and go to state 102
    '-' 	shift, and go to state 103

    $default	reduce using rule 42 (expression)



state 123

    expression  ->  expression NEQ simpleExpression .   (rule 43)
    simpleExpression  ->  simpleExpression . '+' unit   (rule 47)
    simpleExpression  ->  simpleExpression . '-' unit   (rule 48)

    '+' 	shift, and go to state 102
    '-' 	shift, and go to state 103

    $default	reduce using rule 43 (expression)



state 124

    expression  ->  expression OR simpleExpression .   (rule 44)
    simpleExpression  ->  simpleExpression . '+' unit   (rule 47)
    simpleExpression  ->  simpleExpression . '-' unit   (rule 48)

    '+' 	shift, and go to state 102
    '-' 	shift, and go to state 103

    $default	reduce using rule 44 (expression)



state 125

    expression  ->  expression AND simpleExpression .   (rule 45)
    simpleExpression  ->  simpleExpression . '+' unit   (rule 47)
    simpleExpression  ->  simpleExpression . '-' unit   (rule 48)

    '+' 	shift, and go to state 102
    '-' 	shift, and go to state 103

    $default	reduce using rule 45 (expression)



state 126

    simpleExpression  ->  simpleExpression '+' unit .   (rule 47)
    unit  ->  unit . '*' unaryFactor   (rule 50)
    unit  ->  unit . '/' unaryFactor   (rule 51)

    '*' 	shift, and go to state 104
    '/' 	shift, and go to state 105

    $default	reduce using rule 47 (simpleExpression)



state 127

    simpleExpression  ->  simpleExpression '-' unit .   (rule 48)
    unit  ->  unit . '*' unaryFactor   (rule 50)
    unit  ->  unit . '/' unaryFactor   (rule 51)

    '*' 	shift, and go to state 104
    '/' 	shift, and go to state 105

    $default	reduce using rule 48 (simpleExpression)



state 128

    unit  ->  unit '*' unaryFactor .   (rule 50)

    $default	reduce using rule 50 (unit)



state 129

    unit  ->  unit '/' unaryFactor .   (rule 51)

    $default	reduce using rule 51 (unit)



state 130

    printInstruction  ->  PRINTF '(' ENDL ')' . ';'   (rule 37)

    ';' 	shift, and go to state 140



state 131

    printInstruction  ->  PRINTF '(' expression ')' . ';'   (rule 36)

    ';' 	shift, and go to state 141



state 132

    scanInstruction  ->  SCANF '(' localVariable ')' . ';'   (rule 38)

    ';' 	shift, and go to state 142



state 133

    scanInstruction  ->  SCANF '(' globalVariable ')' . ';'   (rule 39)

    ';' 	shift, and go to state 143



state 134

    assignmentInstruction  ->  SCOPE_OPERATOR identifier '=' expression . ';'   (rule 31)
    expression  ->  expression . '<' simpleExpression   (rule 40)
    expression  ->  expression . '>' simpleExpression   (rule 41)
    expression  ->  expression . EQ simpleExpression   (rule 42)
    expression  ->  expression . NEQ simpleExpression   (rule 43)
    expression  ->  expression . OR simpleExpression   (rule 44)
    expression  ->  expression . AND simpleExpression   (rule 45)

    '>' 	shift, and go to state 95
    '<' 	shift, and go to state 96
    EQ  	shift, and go to state 97
    NEQ 	shift, and go to state 98
    OR  	shift, and go to state 99
    AND 	shift, and go to state 100
    ';' 	shift, and go to state 144



state 135

    assignmentInstruction  ->  identifier '=' expression ';' .   (rule 30)

    $default	reduce using rule 30 (assignmentInstruction)



state 136

    functionCall  ->  identifier '(' expressionList ')' .   (rule 64)

    $default	reduce using rule 64 (functionCall)



state 137

    expressionList  ->  expressionList ',' . expression   (rule 65)

    NUMBER	shift, and go to state 23
    IDENTIFIER	shift, and go to state 7
    TEXTLITERAL	shift, and go to state 29
    '+' 	shift, and go to state 65
    '-' 	shift, and go to state 66
    SCOPE_OPERATOR	shift, and go to state 67
    '(' 	shift, and go to state 68

    expression	go to state 145
    simpleExpression	go to state 70
    unit	go to state 71
    unaryFactor	go to state 72
    factor	go to state 73
    localVariable	go to state 74
    globalVariable	go to state 75
    functionCall	go to state 76
    bracket	go to state 77
    textLiteral	go to state 78
    number	go to state 79
    identifier	go to state 80



state 138

    whileInstruction  ->  WHILE '(' expression ')' instruction .   (rule 34)

    $default	reduce using rule 34 (whileInstruction)



state 139

    ifStatement  ->  IF '(' expression ')' instruction .   (rule 32)
    ifStatement  ->  IF '(' expression ')' instruction . ELSE instruction   (rule 33)

    ELSE	shift, and go to state 146

    $default	reduce using rule 32 (ifStatement)



state 140

    printInstruction  ->  PRINTF '(' ENDL ')' ';' .   (rule 37)

    $default	reduce using rule 37 (printInstruction)



state 141

    printInstruction  ->  PRINTF '(' expression ')' ';' .   (rule 36)

    $default	reduce using rule 36 (printInstruction)



state 142

    scanInstruction  ->  SCANF '(' localVariable ')' ';' .   (rule 38)

    $default	reduce using rule 38 (scanInstruction)



state 143

    scanInstruction  ->  SCANF '(' globalVariable ')' ';' .   (rule 39)

    $default	reduce using rule 39 (scanInstruction)



state 144

    assignmentInstruction  ->  SCOPE_OPERATOR identifier '=' expression ';' .   (rule 31)

    $default	reduce using rule 31 (assignmentInstruction)



state 145

    expression  ->  expression . '<' simpleExpression   (rule 40)
    expression  ->  expression . '>' simpleExpression   (rule 41)
    expression  ->  expression . EQ simpleExpression   (rule 42)
    expression  ->  expression . NEQ simpleExpression   (rule 43)
    expression  ->  expression . OR simpleExpression   (rule 44)
    expression  ->  expression . AND simpleExpression   (rule 45)
    expressionList  ->  expressionList ',' expression .   (rule 65)

    '>' 	shift, and go to state 95
    '<' 	shift, and go to state 96
    EQ  	shift, and go to state 97
    NEQ 	shift, and go to state 98
    OR  	shift, and go to state 99
    AND 	shift, and go to state 100

    $default	reduce using rule 65 (expressionList)



state 146

    ifStatement  ->  IF '(' expression ')' instruction ELSE . instruction   (rule 33)

    IDENTIFIER	shift, and go to state 7
    DOUBLE	shift, and go to state 39
    STRING	shift, and go to state 40
    WHILE	shift, and go to state 41
    IF  	shift, and go to state 42
    RETURN	shift, and go to state 43
    PRINTF	shift, and go to state 44
    SCANF	shift, and go to state 45
    SCOPE_OPERATOR	shift, and go to state 46
    '{' 	shift, and go to state 47

    declaration	go to state 48
    instruction	go to state 147
    complexInstruction	go to state 50
    assignmentInstruction	go to state 51
    ifStatement	go to state 52
    whileInstruction	go to state 53
    returnInstruction	go to state 54
    printInstruction	go to state 55
    scanInstruction	go to state 56
    functionCall	go to state 57
    identifier	go to state 58



state 147

    ifStatement  ->  IF '(' expression ')' instruction ELSE instruction .   (rule 33)

    $default	reduce using rule 33 (ifStatement)



state 148

    $   	go to state 149



state 149

    $   	go to state 150



state 150

    $default	accept
